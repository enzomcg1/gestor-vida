generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                 @id @default(uuid())
  email                 String                 @unique
  name                  String?
  password              String?
  image                 String?
  emailVerified         DateTime?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  categories            Category[]
  recurringTransactions RecurringTransaction[]
  routines              Routine[]
  savingsGoals          SavingsGoal[]
  tasks                 Task[]
  transactions          Transaction[]

  @@map("users")
}

model Task {
  id          String    @id @default(uuid())
  title       String
  description String?
  completed   Boolean   @default(false)
  priority    Priority  @default(MEDIUM)
  dueDate     DateTime?
  userId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("tasks")
}

model Routine {
  id          String              @id @default(uuid())
  name        String
  description String?
  frequency   Frequency           @default(DAILY)
  isActive    Boolean             @default(true)
  userId      String
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  completions RoutineCompletion[]
  user        User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("routines")
}

model RoutineCompletion {
  id          String   @id @default(uuid())
  routineId   String
  completedAt DateTime @default(now())
  notes       String?
  routine     Routine  @relation(fields: [routineId], references: [id], onDelete: Cascade)

  @@map("routine_completions")
}

model Category {
  id                    String                 @id @default(uuid())
  name                  String
  type                  CategoryType
  description           String?
  color                 String?
  userId                String
  createdAt             DateTime               @default(now())
  user                  User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  recurringTransactions RecurringTransaction[]
  transactions          Transaction[]

  @@unique([name, userId])
  @@map("categories")
}

model Transaction {
  id                     String                @id @default(uuid())
  amount                 Decimal               @db.Decimal(10, 2)
  description            String
  type                   TransactionType
  date                   DateTime              @default(now())
  categoryId             String
  userId                 String
  recurringTransactionId String?
  createdAt              DateTime              @default(now())
  updatedAt              DateTime              @updatedAt
  category               Category              @relation(fields: [categoryId], references: [id])
  recurringTransaction   RecurringTransaction? @relation(fields: [recurringTransactionId], references: [id])
  user                   User                  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("transactions")
}

model SavingsGoal {
  id            String                @id @default(uuid())
  name          String
  description   String?
  targetAmount  Decimal               @db.Decimal(10, 2)
  currentAmount Decimal               @default(0) @db.Decimal(10, 2)
  targetDate    DateTime?
  isCompleted   Boolean               @default(false)
  userId        String
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
  contributions SavingsContribution[]
  user          User                  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("savings_goals")
}

model SavingsContribution {
  id            String      @id @default(uuid())
  savingsGoalId String
  amount        Decimal     @db.Decimal(10, 2)
  date          DateTime    @default(now())
  description   String?
  savingsGoal   SavingsGoal @relation(fields: [savingsGoalId], references: [id], onDelete: Cascade)

  @@map("savings_contributions")
}

model RecurringTransaction {
  id           String             @id @default(uuid())
  name         String
  description  String?
  amount       Decimal            @db.Decimal(10, 2)
  type         TransactionType
  categoryId   String
  userId       String
  frequency    RecurringFrequency @default(MONTHLY)
  dayOfMonth   Int?
  isActive     Boolean            @default(true)
  nextDueDate  DateTime?
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  category     Category           @relation(fields: [categoryId], references: [id])
  user         User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@map("recurring_transactions")
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum Frequency {
  DAILY
  WEEKLY
  MONTHLY
}

enum CategoryType {
  INCOME
  EXPENSE
}

enum TransactionType {
  INCOME
  EXPENSE
}

enum RecurringFrequency {
  MONTHLY
  WEEKLY
  YEARLY
}
